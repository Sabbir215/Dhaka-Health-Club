---
import Layout from '../layouts/Layout.astro';

// --- Server-Side Data Fetching ---
// Astro allows us to fetch data directly in the frontmatter. 
// This code runs on the server at build time or on request.

let dashboardData = null;
let users = [];

// Helper function to simulate fetching dashboard data
async function getDashboardData() {
    // Simulate the data we just seeded
    return {
        projects: 12,
        tasks: 4,
        users: 3,
        notifications: 7,
    };
}

// Helper function to simulate fetching user data
async function getUsers() {
    // Returning empty for now, will be populated client-side
    return [];
}

dashboardData = await getDashboardData();
users = await getUsers();

---

<Layout title="Dashboard - Dhaka Health Club">
  <div class="container mx-auto py-12 px-4">
    <!-- Welcome Header -->
    <div class="mb-12">
      <h1 id="welcome-message" class="text-5xl font-bold mb-3 text-gradient">Welcome!</h1>
      <p class="text-slate-600 text-lg">Here's what's happening in the community</p>
    </div>
    
    <!-- Stats Grid -->
    <div class="grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12">
      <div class="card p-8 hover:scale-105 transition-transform duration-300">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-semibold text-slate-700">Projects</h3>
          <div class="w-12 h-12 bg-gradient-to-br from-green-400 to-emerald-600 rounded-xl flex items-center justify-center">
            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
          </div>
        </div>
        <p id="projects-count" class="text-4xl font-bold text-slate-800">{dashboardData?.projects || 0}</p>
      </div>
      
      <div class="card p-8 hover:scale-105 transition-transform duration-300">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-semibold text-slate-700">Active Tasks</h3>
          <div class="w-12 h-12 bg-gradient-to-br from-emerald-400 to-green-600 rounded-xl flex items-center justify-center">
            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path>
            </svg>
          </div>
        </div>
        <p id="tasks-count" class="text-4xl font-bold text-slate-800">{dashboardData?.tasks || 0}</p>
      </div>
      
      <div class="card p-8 hover:scale-105 transition-transform duration-300">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-semibold text-slate-700">Community</h3>
          <div class="w-12 h-12 bg-gradient-to-br from-teal-400 to-emerald-600 rounded-xl flex items-center justify-center">
            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
            </svg>
          </div>
        </div>
        <p id="users-count" class="text-4xl font-bold text-slate-800">{dashboardData?.users || 0}</p>
      </div>
      
      <div class="card p-8 hover:scale-105 transition-transform duration-300">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-semibold text-slate-700">Notifications</h3>
          <div class="w-12 h-12 bg-gradient-to-br from-lime-400 to-green-600 rounded-xl flex items-center justify-center">
            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"></path>
            </svg>
          </div>
        </div>
        <p id="notifications-count" class="text-4xl font-bold text-slate-800">{dashboardData?.notifications || 0}</p>
      </div>
    </div>

    <!-- Community Moments Carousel -->
    <div class="mb-12">
      <div class="flex items-center justify-between mb-8">
        <div>
          <h2 class="text-4xl font-bold text-gradient mb-2">Community Moments</h2>
          <p class="text-slate-600">Highlights from our recent events</p>
        </div>
        <a href="/gallery" class="btn btn-primary">
          View All Photos
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
          </svg>
        </a>
      </div>
      
      <div class="relative overflow-hidden rounded-2xl">
        <!-- Carousel container -->
        <div id="carousel" class="flex transition-transform duration-500 ease-out">
          <div class="min-w-full relative">
            <img src="/gallery/community-event-1.jpg" alt="Community Event" class="w-full h-96 object-cover rounded-2xl" />
            <div class="absolute inset-0 bg-gradient-to-t from-green-900/70 via-transparent to-transparent rounded-2xl flex items-end">
              <div class="p-8 text-white">
                <h3 class="text-2xl font-bold mb-2">Community Gathering</h3>
                <p class="text-green-100">Building connections and sharing ideas</p>
              </div>
            </div>
          </div>
          <div class="min-w-full relative">
            <img src="/gallery/community-event-2.jpg" alt="Community Event" class="w-full h-96 object-cover rounded-2xl" />
            <div class="absolute inset-0 bg-gradient-to-t from-emerald-900/70 via-transparent to-transparent rounded-2xl flex items-end">
              <div class="p-8 text-white">
                <h3 class="text-2xl font-bold mb-2">Team Activities</h3>
                <p class="text-emerald-100">Collaborative exercises strengthening our bonds</p>
              </div>
            </div>
          </div>
          <div class="min-w-full relative">
            <img src="/gallery/community-event-3.jpg" alt="Community Event" class="w-full h-96 object-cover rounded-2xl" />
            <div class="absolute inset-0 bg-gradient-to-t from-teal-900/70 via-transparent to-transparent rounded-2xl flex items-end">
              <div class="p-8 text-white">
                <h3 class="text-2xl font-bold mb-2">Wellness Workshop</h3>
                <p class="text-teal-100">Mindfulness and meditation sessions</p>
              </div>
            </div>
          </div>
          <div class="min-w-full relative">
            <img src="/gallery/community-event-4.jpg" alt="Community Event" class="w-full h-96 object-cover rounded-2xl" />
            <div class="absolute inset-0 bg-gradient-to-t from-green-900/70 via-transparent to-transparent rounded-2xl flex items-end">
              <div class="p-8 text-white">
                <h3 class="text-2xl font-bold mb-2">Making Impact</h3>
                <p class="text-green-100">Community service creating positive change</p>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Navigation buttons -->
        <button id="prev-btn" class="absolute left-4 top-1/2 -translate-y-1/2 w-12 h-12 bg-white/90 backdrop-blur-sm rounded-full flex items-center justify-center hover:bg-green-500 hover:text-white transition-all duration-300 shadow-lg">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
          </svg>
        </button>
        <button id="next-btn" class="absolute right-4 top-1/2 -translate-y-1/2 w-12 h-12 bg-white/90 backdrop-blur-sm rounded-full flex items-center justify-center hover:bg-green-500 hover:text-white transition-all duration-300 shadow-lg">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
        </button>
        
        <!-- Indicators -->
        <div class="absolute bottom-4 left-1/2 -translate-x-1/2 flex gap-2">
          <button class="carousel-indicator w-3 h-3 rounded-full bg-white/60 hover:bg-white transition-colors duration-300" data-index="0"></button>
          <button class="carousel-indicator w-3 h-3 rounded-full bg-white/60 hover:bg-white transition-colors duration-300" data-index="1"></button>
          <button class="carousel-indicator w-3 h-3 rounded-full bg-white/60 hover:bg-white transition-colors duration-300" data-index="2"></button>
          <button class="carousel-indicator w-3 h-3 rounded-full bg-white/60 hover:bg-white transition-colors duration-300" data-index="3"></button>
        </div>
      </div>
    </div>

    <!-- Community Members Section -->
    <div class="mb-12">
      <div class="flex items-center justify-between mb-8">
        <div>
          <h2 class="text-4xl font-bold text-gradient mb-2">Community Members</h2>
          <p class="text-slate-600">Meet our active contributors</p>
        </div>
      </div>
      
      <div id="users-grid" class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
        <!-- Users will be populated here by JavaScript -->
        <div class="card p-6 animate-pulse">
          <div class="flex items-center gap-4 mb-4">
            <div class="w-16 h-16 bg-slate-200 rounded-full"></div>
            <div class="flex-1">
              <div class="h-4 bg-slate-200 rounded w-3/4 mb-2"></div>
              <div class="h-3 bg-slate-200 rounded w-1/2"></div>
            </div>
          </div>
          <div class="h-3 bg-slate-200 rounded w-full mb-2"></div>
          <div class="h-3 bg-slate-200 rounded w-2/3"></div>
        </div>
        <div class="card p-6 animate-pulse">
          <div class="flex items-center gap-4 mb-4">
            <div class="w-16 h-16 bg-slate-200 rounded-full"></div>
            <div class="flex-1">
              <div class="h-4 bg-slate-200 rounded w-3/4 mb-2"></div>
              <div class="h-3 bg-slate-200 rounded w-1/2"></div>
            </div>
          </div>
          <div class="h-3 bg-slate-200 rounded w-full mb-2"></div>
          <div class="h-3 bg-slate-200 rounded w-2/3"></div>
        </div>
        <div class="card p-6 animate-pulse">
          <div class="flex items-center gap-4 mb-4">
            <div class="w-16 h-16 bg-slate-200 rounded-full"></div>
            <div class="flex-1">
              <div class="h-4 bg-slate-200 rounded w-3/4 mb-2"></div>
              <div class="h-3 bg-slate-200 rounded w-1/2"></div>
            </div>
          </div>
          <div class="h-3 bg-slate-200 rounded w-full mb-2"></div>
          <div class="h-3 bg-slate-200 rounded w-2/3"></div>
        </div>
      </div>
    </div>

  </div>
</Layout>

<script>
  import { collection, doc, getDocs, getFirestore, limit, onSnapshot, orderBy, query } from "firebase/firestore";
import { onAuthStateChangedListener } from "../firebase/auth";
import { app } from "../firebase/client";

  const welcomeMessage = document.getElementById('welcome-message');

  // Helper function to get initials from name
  function getInitials(name: string): string {
    if (!name) return '?';
    const parts = name.trim().split(' ');
    if (parts.length === 1) return parts[0].charAt(0).toUpperCase();
    return (parts[0].charAt(0) + parts[parts.length - 1].charAt(0)).toUpperCase();
  }

  // Helper function to generate a gradient color based on name
  function getGradientForName(name: string): string {
    const gradients = [
      'from-green-400 to-emerald-600',
      'from-emerald-400 to-teal-600',
      'from-teal-400 to-green-600',
      'from-lime-400 to-green-600',
      'from-green-500 to-emerald-700',
    ];
    const index = (name?.charCodeAt(0) || 0) % gradients.length;
    return gradients[index];
  }

  // Helper function to format timestamp
  function formatTimestamp(timestamp: any): string {
    if (!timestamp) return 'Recently';
    
    try {
      let date: Date;
      if (timestamp.toDate) {
        date = timestamp.toDate();
      } else if (timestamp instanceof Date) {
        date = timestamp;
      } else {
        date = new Date(timestamp);
      }
      
      const now = new Date();
      const diffMs = now.getTime() - date.getTime();
      const diffMins = Math.floor(diffMs / 60000);
      const diffHours = Math.floor(diffMs / 3600000);
      const diffDays = Math.floor(diffMs / 86400000);
      
      if (diffMins < 1) return 'Just now';
      if (diffMins < 60) return `${diffMins} min ago`;
      if (diffHours < 24) return `${diffHours}h ago`;
      if (diffDays < 7) return `${diffDays}d ago`;
      return date.toLocaleDateString();
    } catch (e) {
      return 'Recently';
    }
  }

  onAuthStateChangedListener(async (user) => {
    if (user) {
      welcomeMessage.textContent = `Welcome back, ${user.displayName || 'User'}!`;
      
      const db = getFirestore(app);

      // --- Real-time listener for Dashboard Stats ---
      const statsDocRef = doc(db, "dashboard", "stats");
      onSnapshot(statsDocRef, (docSnap) => {
        if (docSnap.exists()) {
          const data = docSnap.data();
          document.getElementById('projects-count')!.textContent = String(data.projects || 0);
          document.getElementById('tasks-count')!.textContent = String(data.tasks || 0);
          document.getElementById('users-count')!.textContent = String(data.users || 0);
          document.getElementById('notifications-count')!.textContent = String(data.notifications || 0);
        }
      }, (error) => {
        console.error('Error listening to stats:', error);
      });

      // --- Real-time listener for Users Collection ---
      const usersCollection = collection(db, "users");
      onSnapshot(usersCollection, async (usersSnapshot) => {
        console.log('📢 Users collection updated! Total members:', usersSnapshot.size);
        console.log('📊 User documents:', usersSnapshot.docs.map(d => ({ id: d.id, ...d.data() })));
        
        const usersGrid = document.getElementById('users-grid');
      
        if (usersGrid) {
          usersGrid.innerHTML = ''; 

          if (usersSnapshot.empty) {
            usersGrid.innerHTML = `
              <div class="col-span-full text-center py-12">
                <div class="w-24 h-24 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <svg class="w-12 h-12 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                  </svg>
                </div>
                <p class="text-slate-600 text-lg">No community members yet</p>
                <p class="text-slate-500 text-sm mt-2">Be the first to join!</p>
              </div>
            `;
          } else {
            // Create an array to hold user data with their contributions
            const usersWithContributions = await Promise.all(
              usersSnapshot.docs.map(async (userDoc) => {
                const userData = userDoc.data();
                
                // Fetch the user's latest contribution from tasks collection
                let latestContribution = 'No recent activity';
                let contributionTime = null;
                
                try {
                  const tasksRef = collection(db, "tasks");
                  const userTasksQuery = query(
                    tasksRef,
                    orderBy("createdAt", "desc"),
                    limit(1)
                  );
                  const tasksSnapshot = await getDocs(userTasksQuery);
                  
                  if (!tasksSnapshot.empty) {
                    const latestTask = tasksSnapshot.docs[0].data();
                    latestContribution = latestTask.title || latestTask.description || 'Contributed to a task';
                    contributionTime = latestTask.createdAt;
                  }
                } catch (error) {
                  // If tasks collection doesn't exist or query fails, use default
                  console.log('Could not fetch tasks:', error);
                }
                
                return {
                  id: userDoc.id,
                  ...userData,
                  latestContribution,
                  contributionTime
                };
              })
            );

            // Render each user card
            usersWithContributions.forEach((userData: any) => {
              const userCard = document.createElement('div');
              userCard.className = 'card p-6 group hover:shadow-xl transition-all duration-300';
              
              const initials = getInitials(userData.fullName || userData.email);
              const gradient = getGradientForName(userData.fullName || userData.email);
              const profileImage = userData.photoURL || userData.profilePicture || '';
              const contributionTimestamp = formatTimestamp(userData.contributionTime);
              
              userCard.innerHTML = `
                <div class="flex items-start gap-4 mb-4">
                  <div class="relative">
                    ${profileImage ? `
                      <img 
                        src="${profileImage}" 
                        alt="${userData.fullName || 'User'}"
                        class="w-16 h-16 rounded-full object-cover ring-2 ring-green-400 ring-offset-2"
                        onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
                      />
                      <div class="w-16 h-16 bg-gradient-to-br ${gradient} rounded-full items-center justify-center text-white font-bold text-xl hidden">
                        ${initials}
                      </div>
                    ` : `
                      <div class="w-16 h-16 bg-gradient-to-br ${gradient} rounded-full flex items-center justify-center text-white font-bold text-xl group-hover:scale-110 transition-transform duration-300">
                        ${initials}
                      </div>
                    `}
                    <div class="absolute -bottom-1 -right-1 w-5 h-5 bg-green-500 rounded-full border-2 border-white"></div>
                  </div>
                  <div class="flex-1 min-w-0">
                    <h3 class="text-lg font-bold text-slate-800 truncate group-hover:text-green-600 transition-colors">
                      ${userData.fullName || 'User'}
                    </h3>
                    <p class="text-sm text-slate-500 truncate">${userData.email}</p>
                  </div>
                </div>
                
                <div class="space-y-2">
                  <div class="flex items-start gap-2">
                    <svg class="w-4 h-4 text-green-600 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                    </svg>
                    <div class="flex-1 min-w-0">
                      <p class="text-sm text-slate-700 font-medium">Latest Contribution:</p>
                      <p class="text-sm text-slate-600 truncate">${userData.latestContribution}</p>
                    </div>
                  </div>
                  
                  ${userData.contributionTime ? `
                    <div class="flex items-center gap-2 text-xs text-slate-500">
                      <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                      </svg>
                      ${contributionTimestamp}
                    </div>
                  ` : ''}
                </div>
              `;
              
              usersGrid.appendChild(userCard);
            });
          }
        }
      }, (error) => {
        console.error('Error listening to users:', error);
      });

    } else {
      window.location.href = "/login";
    }
  });

  // --- Carousel Functionality ---
  const carousel = document.getElementById('carousel');
  const prevBtn = document.getElementById('prev-btn');
  const nextBtn = document.getElementById('next-btn');
  const indicators = document.querySelectorAll('.carousel-indicator');
  let currentSlide = 0;
  const totalSlides = 4;
  let autoPlayInterval: number | undefined;

  function updateCarousel() {
    if (carousel) {
      carousel.style.transform = `translateX(-${currentSlide * 100}%)`;
      
      // Update indicators
      indicators.forEach((indicator, index) => {
        if (index === currentSlide) {
          indicator.classList.add('bg-white');
          indicator.classList.remove('bg-white/60');
        } else {
          indicator.classList.remove('bg-white');
          indicator.classList.add('bg-white/60');
        }
      });
    }
  }

  function nextSlide() {
    currentSlide = (currentSlide + 1) % totalSlides;
    updateCarousel();
  }

  function prevSlide() {
    currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;
    updateCarousel();
  }

  function startAutoPlay() {
    autoPlayInterval = window.setInterval(nextSlide, 5000);
  }

  function stopAutoPlay() {
    if (autoPlayInterval) {
      clearInterval(autoPlayInterval);
    }
  }

  // Event listeners
  if (nextBtn) {
    nextBtn.addEventListener('click', () => {
      stopAutoPlay();
      nextSlide();
      startAutoPlay();
    });
  }

  if (prevBtn) {
    prevBtn.addEventListener('click', () => {
      stopAutoPlay();
      prevSlide();
      startAutoPlay();
    });
  }

  indicators.forEach((indicator, index) => {
    indicator.addEventListener('click', () => {
      stopAutoPlay();
      currentSlide = index;
      updateCarousel();
      startAutoPlay();
    });
  });

  // Start autoplay
  startAutoPlay();

  // Pause on hover
  if (carousel) {
    carousel.addEventListener('mouseenter', stopAutoPlay);
    carousel.addEventListener('mouseleave', startAutoPlay);
  }
</script>

<style>
  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
  }
  
  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
</style>

